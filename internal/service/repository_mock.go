// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	model "super-payment-kun/internal/model"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateInvoiceRepo is a mock of CreateInvoiceRepo interface.
type MockCreateInvoiceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCreateInvoiceRepoMockRecorder
}

// MockCreateInvoiceRepoMockRecorder is the mock recorder for MockCreateInvoiceRepo.
type MockCreateInvoiceRepoMockRecorder struct {
	mock *MockCreateInvoiceRepo
}

// NewMockCreateInvoiceRepo creates a new mock instance.
func NewMockCreateInvoiceRepo(ctrl *gomock.Controller) *MockCreateInvoiceRepo {
	mock := &MockCreateInvoiceRepo{ctrl: ctrl}
	mock.recorder = &MockCreateInvoiceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateInvoiceRepo) EXPECT() *MockCreateInvoiceRepoMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockCreateInvoiceRepo) CreateInvoice(ctx context.Context, invoice *model.Invoice) (*model.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, invoice)
	ret0, _ := ret[0].(*model.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockCreateInvoiceRepoMockRecorder) CreateInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockCreateInvoiceRepo)(nil).CreateInvoice), ctx, invoice)
}

// GetVendorAndBankAccount mocks base method.
func (m *MockCreateInvoiceRepo) GetVendorAndBankAccount(ctx context.Context, vendorBankAccount model.VendorBankAccount) (*model.Vendor, *model.VendorBankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorAndBankAccount", ctx, vendorBankAccount)
	ret0, _ := ret[0].(*model.Vendor)
	ret1, _ := ret[1].(*model.VendorBankAccount)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVendorAndBankAccount indicates an expected call of GetVendorAndBankAccount.
func (mr *MockCreateInvoiceRepoMockRecorder) GetVendorAndBankAccount(ctx, vendorBankAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorAndBankAccount", reflect.TypeOf((*MockCreateInvoiceRepo)(nil).GetVendorAndBankAccount), ctx, vendorBankAccount)
}

// MockGetInvoicesRepo is a mock of GetInvoicesRepo interface.
type MockGetInvoicesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGetInvoicesRepoMockRecorder
}

// MockGetInvoicesRepoMockRecorder is the mock recorder for MockGetInvoicesRepo.
type MockGetInvoicesRepoMockRecorder struct {
	mock *MockGetInvoicesRepo
}

// NewMockGetInvoicesRepo creates a new mock instance.
func NewMockGetInvoicesRepo(ctrl *gomock.Controller) *MockGetInvoicesRepo {
	mock := &MockGetInvoicesRepo{ctrl: ctrl}
	mock.recorder = &MockGetInvoicesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetInvoicesRepo) EXPECT() *MockGetInvoicesRepoMockRecorder {
	return m.recorder
}

// GetInvoicesBetweenDueDates mocks base method.
func (m *MockGetInvoicesRepo) GetInvoicesBetweenDueDates(ctx context.Context, company model.Company, fromDueDate, toDueDate time.Time, limit int, lastID string, lastDueDate time.Time, direction string) ([]model.Invoice, string, time.Time, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesBetweenDueDates", ctx, company, fromDueDate, toDueDate, limit, lastID, lastDueDate, direction)
	ret0, _ := ret[0].([]model.Invoice)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(bool)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetInvoicesBetweenDueDates indicates an expected call of GetInvoicesBetweenDueDates.
func (mr *MockGetInvoicesRepoMockRecorder) GetInvoicesBetweenDueDates(ctx, company, fromDueDate, toDueDate, limit, lastID, lastDueDate, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesBetweenDueDates", reflect.TypeOf((*MockGetInvoicesRepo)(nil).GetInvoicesBetweenDueDates), ctx, company, fromDueDate, toDueDate, limit, lastID, lastDueDate, direction)
}
